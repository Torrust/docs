{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Introduction to Torrust Torrust is an open source project that aims to provide you with the tools you need to host your own torrent indexes with ease. The Torrust name is a combination of Tor rent and Rust . \"Rust is a modern systems programming language focusing on safety, speed, and concurrency.\" Introduction - Rust By Example, https://doc.rust-lang.org/rust-by-example/. This is why we believe that Rust is the perfect tool for our project. Project structure torrust-tracker Repository : https://github.com/torrust/torrust-tracker Description : A modern and feature-rich (private) BitTorrent tracker. torrust-index Repository : https://github.com/torrust/torrust-index Description : torrust-index is a feature-rich torrent indexing website for the torrust-tracker.","title":"Introduction"},{"location":"#introduction-to-torrust","text":"Torrust is an open source project that aims to provide you with the tools you need to host your own torrent indexes with ease. The Torrust name is a combination of Tor rent and Rust . \"Rust is a modern systems programming language focusing on safety, speed, and concurrency.\" Introduction - Rust By Example, https://doc.rust-lang.org/rust-by-example/. This is why we believe that Rust is the perfect tool for our project.","title":"Introduction to Torrust"},{"location":"#project-structure","text":"","title":"Project structure"},{"location":"#torrust-tracker","text":"Repository : https://github.com/torrust/torrust-tracker Description : A modern and feature-rich (private) BitTorrent tracker.","title":"torrust-tracker"},{"location":"#torrust-index","text":"Repository : https://github.com/torrust/torrust-index Description : torrust-index is a feature-rich torrent indexing website for the torrust-tracker.","title":"torrust-index"},{"location":"torrust-index/api/","text":"Index REST API This page is heavy WIP and missing a lot of endpoints from the newest torrust-index. Authorization Some routes can only be accessed by logged in users. For these routes you have to send the token obtained in /user/login in the Authorization header as a bearer token. For example: Authorization: Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJleGFtcGxlX3VzZXIiLCJleHAiOjE2MzIyNTQxNjZ9.kyugZXiR88q4n6Ze44HonazDp-sJdq886te9-XHthHg Errors Every route always returns a non 2xx status code for an error. If the error is caused by user input the status code will be in the 4xx range. Unrecoverable server errors return a 500 status code. Every error contains a error message that is safe to display to an user. The body of an error should always look like this: { \"error\": \"<error message>\" } Torrent GET /torrents Get all torrent information of the listing with id , used for loading the data of the TorrentDetails page. Optional query params: Param Description Value Example categories Included categories. Comma seperated list. ?categories=music,other,movies search Search term. String. &search=bunny sort Sorting and sort direction. uploaded_ASC , uploaded_DESC , seeders_ASC , seeders_DESC , leechers_ASC , leechers_DESC , name_ASC , name_DESC , size_ASC , size_DESC &sort=size_DESC Response: On success: Status 200 . { \"data\": { \"total\": 1, \"results\": [ { \"torrent_id\": 1, \"uploader\": \"test\", \"info_hash\": \"bc03e1a08565f8f09bed7c10aad3e6e7771a88fc\", \"title\": \"Lucky.The.Labrador.IMG.PNG\", \"description\": \"\", \"category_id\": 5, \"upload_date\": 1646783943, \"file_size\": 1710641, \"seeders\": 0, \"leechers\": 0 } ] } } POST /torrent/upload Upload a torrent file and create a torrent listing for it in the index. Consumes a multipart form with the fields: title : Title of the torrent listing. description : A Markdown description. category : Category this torrent fits in. torrent : The torrent file itself. Response: On success: Status 200 , returns id of the newly created torrent listing. { \"data\": { \"torrent_id\": 1 } } On error: Standard error, see Errors GET /torrent/download/<id> Generate and download torrent file with a personal announce URL for the authenticated user. Response: On success: Status 200 , Personalized .torrent file stream. On error: Standard error, see Errors GET /torrent/<id> Get all torrent information of the listing with id , used for loading the data of the TorrentDetails page. Response : On success: Status 200 . { \"data\": { \"torrent_id\": 1, \"uploader\": \"example_user\", \"info_hash\": \"5499b9f42b44fb61c937be5943a194adb7aa6278\", \"title\": \"Example torrent\", \"description\": \"## Some torrent title\\n\\nSome torrent text.\\n\\n---\", \"category_id\": 1, \"upload_date\": 1631046870, \"file_size\": 15653809, \"seeders\": 0, \"leechers\": 0, \"files\": null } } On error: Standard error, see Errors Category GET /category Get a list of existing categories. Response : On success: Status 200 . { \"data\": [ { \"name\": \"app\", \"num_torrents\": 0 }, { \"name\": \"documentary\", \"num_torrents\": 0 }, { \"name\": \"game\", \"num_torrents\": 0 }, { \"name\": \"movie\", \"num_torrents\": 1 }, { \"name\": \"music\", \"num_torrents\": 0 }, { \"name\": \"other\", \"num_torrents\": 0 }, { \"name\": \"tv show\", \"num_torrents\": 0 } ] } On error: Standard error, see Errors User POST /user/register Register (sign-up) a new user account. Example: POST /user/register Body : { \"email\": \"email@example.com\", \"username\": \"example_user\", \"password\": \"password\", \"confirm_password\": \"password\" } Response : On success: Status 200 , with an empty body. On error: Standard error, see Errors POST /user/login Login into an existing account. Fields : login : Either the email or username of the account password : password of the account Example: POST /user/login Body : { \"login\": \"email@example.com\", \"password\": \"password\" } Response : On success: Status 200 . { \"data\": { \"token\": \"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJleGFtcGxlX3VzZXIiLCJleHAiOjE2MzIyNTQxNjZ9.kyugZXiR88q4n6Ze44HonazDp-sJdq886te9-XHthHg\", \"username\": \"example_user\" } } On error: Standard error, see Errors GET /user/verify/<token> Email verification handler. On register an email is sent to the email address of the registered account with a link to this route to verify their email address. Example: GET /user/verify/<token> Response : On success: Status 200 . Email verified, you can close this page. On error: Error message as a string. Token invalid. DELETE /user/ban/<username> Ban users. Example: DELETE /user/verify/<username> Response : On success: Status 200 . { \"message\": \"User successfully banned!\" } On error: Error message as a string. { \"error\": \"Could not find user.\" }","title":"API"},{"location":"torrust-index/api/#index-rest-api","text":"This page is heavy WIP and missing a lot of endpoints from the newest torrust-index.","title":"Index REST API"},{"location":"torrust-index/api/#authorization","text":"Some routes can only be accessed by logged in users. For these routes you have to send the token obtained in /user/login in the Authorization header as a bearer token. For example: Authorization: Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJleGFtcGxlX3VzZXIiLCJleHAiOjE2MzIyNTQxNjZ9.kyugZXiR88q4n6Ze44HonazDp-sJdq886te9-XHthHg","title":"Authorization"},{"location":"torrust-index/api/#errors","text":"Every route always returns a non 2xx status code for an error. If the error is caused by user input the status code will be in the 4xx range. Unrecoverable server errors return a 500 status code. Every error contains a error message that is safe to display to an user. The body of an error should always look like this: { \"error\": \"<error message>\" }","title":"Errors"},{"location":"torrust-index/api/#torrent","text":"","title":"Torrent"},{"location":"torrust-index/api/#get-torrents","text":"Get all torrent information of the listing with id , used for loading the data of the TorrentDetails page. Optional query params: Param Description Value Example categories Included categories. Comma seperated list. ?categories=music,other,movies search Search term. String. &search=bunny sort Sorting and sort direction. uploaded_ASC , uploaded_DESC , seeders_ASC , seeders_DESC , leechers_ASC , leechers_DESC , name_ASC , name_DESC , size_ASC , size_DESC &sort=size_DESC Response: On success: Status 200 . { \"data\": { \"total\": 1, \"results\": [ { \"torrent_id\": 1, \"uploader\": \"test\", \"info_hash\": \"bc03e1a08565f8f09bed7c10aad3e6e7771a88fc\", \"title\": \"Lucky.The.Labrador.IMG.PNG\", \"description\": \"\", \"category_id\": 5, \"upload_date\": 1646783943, \"file_size\": 1710641, \"seeders\": 0, \"leechers\": 0 } ] } }","title":"GET /torrents"},{"location":"torrust-index/api/#post-torrentupload","text":"Upload a torrent file and create a torrent listing for it in the index. Consumes a multipart form with the fields: title : Title of the torrent listing. description : A Markdown description. category : Category this torrent fits in. torrent : The torrent file itself. Response: On success: Status 200 , returns id of the newly created torrent listing. { \"data\": { \"torrent_id\": 1 } } On error: Standard error, see Errors","title":"POST /torrent/upload"},{"location":"torrust-index/api/#get-torrentdownloadid","text":"Generate and download torrent file with a personal announce URL for the authenticated user. Response: On success: Status 200 , Personalized .torrent file stream. On error: Standard error, see Errors","title":"GET /torrent/download/&lt;id&gt;"},{"location":"torrust-index/api/#get-torrentid","text":"Get all torrent information of the listing with id , used for loading the data of the TorrentDetails page. Response : On success: Status 200 . { \"data\": { \"torrent_id\": 1, \"uploader\": \"example_user\", \"info_hash\": \"5499b9f42b44fb61c937be5943a194adb7aa6278\", \"title\": \"Example torrent\", \"description\": \"## Some torrent title\\n\\nSome torrent text.\\n\\n---\", \"category_id\": 1, \"upload_date\": 1631046870, \"file_size\": 15653809, \"seeders\": 0, \"leechers\": 0, \"files\": null } } On error: Standard error, see Errors","title":"GET /torrent/&lt;id&gt;"},{"location":"torrust-index/api/#category","text":"","title":"Category"},{"location":"torrust-index/api/#get-category","text":"Get a list of existing categories. Response : On success: Status 200 . { \"data\": [ { \"name\": \"app\", \"num_torrents\": 0 }, { \"name\": \"documentary\", \"num_torrents\": 0 }, { \"name\": \"game\", \"num_torrents\": 0 }, { \"name\": \"movie\", \"num_torrents\": 1 }, { \"name\": \"music\", \"num_torrents\": 0 }, { \"name\": \"other\", \"num_torrents\": 0 }, { \"name\": \"tv show\", \"num_torrents\": 0 } ] } On error: Standard error, see Errors","title":"GET /category"},{"location":"torrust-index/api/#user","text":"","title":"User"},{"location":"torrust-index/api/#post-userregister","text":"Register (sign-up) a new user account. Example: POST /user/register Body : { \"email\": \"email@example.com\", \"username\": \"example_user\", \"password\": \"password\", \"confirm_password\": \"password\" } Response : On success: Status 200 , with an empty body. On error: Standard error, see Errors","title":"POST /user/register"},{"location":"torrust-index/api/#post-userlogin","text":"Login into an existing account. Fields : login : Either the email or username of the account password : password of the account Example: POST /user/login Body : { \"login\": \"email@example.com\", \"password\": \"password\" } Response : On success: Status 200 . { \"data\": { \"token\": \"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJleGFtcGxlX3VzZXIiLCJleHAiOjE2MzIyNTQxNjZ9.kyugZXiR88q4n6Ze44HonazDp-sJdq886te9-XHthHg\", \"username\": \"example_user\" } } On error: Standard error, see Errors","title":"POST /user/login"},{"location":"torrust-index/api/#get-userverifytoken","text":"Email verification handler. On register an email is sent to the email address of the registered account with a link to this route to verify their email address. Example: GET /user/verify/<token> Response : On success: Status 200 . Email verified, you can close this page. On error: Error message as a string. Token invalid.","title":"GET /user/verify/&lt;token&gt;"},{"location":"torrust-index/api/#delete-userbanusername","text":"Ban users. Example: DELETE /user/verify/<username> Response : On success: Status 200 . { \"message\": \"User successfully banned!\" } On error: Error message as a string. { \"error\": \"Could not find user.\" }","title":"DELETE /user/ban/&lt;username&gt;"},{"location":"torrust-index/config/","text":"Configuring the Index Torrust's configuration is a simple TOML file. If no TOML file is found, it will fail on startup. Must change These are all the configuration options that can affect the security of your instance. Please make sure to change these to your own values. tracker.token auth.secret_key Configuration Tracker REQUIRED url : public UDP url of the torrust-tracker instance. REQUIRED api_url : URL of the torrust-tracker API, usually http://localhost:1212 . REQUIRED token : token configured in the torrust-tracker configuration. REQUIRED token_valid_seconds : Lifetime of a tracker key. NET REQUIRED port : The port the API will listen on. It's not advised to use ports under 1024 because root access is required for these ports. OPTIONAL base_url : The URL this application is accessible from. Used to build the email verification URL. If not set it uses the hostname the endpoint was called from. Database REQUIRED connect_url : The connection URL of the database. Should always start with sqlite: , no other databases are supported as of now.Including mode=rwc allows the database to be Read / Written / Created . Example: sqlite://data.db?mode=rwc REQUIRED torrent_info_update_interval : Interval in seconds for updating torrent seeder and leecher information. This can be a heavy operation depending on the amount of torrents that are tracked, and thus is not recommended to be lower than 1800 seconds. Mail REQUIRED server : Hostname or IP address of a SMTP server. REQUIRED port : Port of the SMTP server. REQUIRED username : Username for authenticating with the specified SMTP server. REQUIRED password : Password for authenticating with the specified SMTP server. REQUIRED from : Email address where emails are sent from. REQUIRED reply_to : Email address to which replies on the emails should be sent. Can also be a non reply address, or the same as the from address. Auth REQUIRED min_password_length : Minimum length of a password when registering a new user. REQUIRED max_password_length : Maximum length of a password when registering a new user. REQUIRED secret_key : Signing key of the JWT authentication tokens. Keeping these default will severely impact the security of your instance, and allows attackers to login as any user. Storage REQUIRED upload_path : Path where uploads should be stored. Directories will be automatically created on startup if they don't exist. Default [website] name = \"Torrust\" [tracker] url = \"udp://torrust.com:6969/announce\" api_url = \"http://localhost:1212\" token = \"MyAccessToken\" token_valid_seconds = 7257600 [net] port = 3000 [auth] min_password_length = 6 max_password_length = 64 secret_key = \"MaxVerstappenWC2021\" [database] connect_url = \"sqlite://data.db?mode=rwc\" torrent_info_update_interval = 3600 [storage] upload_path = \"./uploads\" [mail] email_verification_enabled = false from = \"example@email.com\" reply_to = \"noreply@email.com\" username = \"\" password = \"\" server = \"\" port = 25","title":"Configuration"},{"location":"torrust-index/config/#configuring-the-index","text":"Torrust's configuration is a simple TOML file. If no TOML file is found, it will fail on startup.","title":"Configuring the Index"},{"location":"torrust-index/config/#must-change","text":"These are all the configuration options that can affect the security of your instance. Please make sure to change these to your own values. tracker.token auth.secret_key","title":"Must change"},{"location":"torrust-index/config/#configuration","text":"","title":"Configuration"},{"location":"torrust-index/config/#tracker","text":"REQUIRED url : public UDP url of the torrust-tracker instance. REQUIRED api_url : URL of the torrust-tracker API, usually http://localhost:1212 . REQUIRED token : token configured in the torrust-tracker configuration. REQUIRED token_valid_seconds : Lifetime of a tracker key.","title":"Tracker"},{"location":"torrust-index/config/#net","text":"REQUIRED port : The port the API will listen on. It's not advised to use ports under 1024 because root access is required for these ports. OPTIONAL base_url : The URL this application is accessible from. Used to build the email verification URL. If not set it uses the hostname the endpoint was called from.","title":"NET"},{"location":"torrust-index/config/#database","text":"REQUIRED connect_url : The connection URL of the database. Should always start with sqlite: , no other databases are supported as of now.Including mode=rwc allows the database to be Read / Written / Created . Example: sqlite://data.db?mode=rwc REQUIRED torrent_info_update_interval : Interval in seconds for updating torrent seeder and leecher information. This can be a heavy operation depending on the amount of torrents that are tracked, and thus is not recommended to be lower than 1800 seconds.","title":"Database"},{"location":"torrust-index/config/#mail","text":"REQUIRED server : Hostname or IP address of a SMTP server. REQUIRED port : Port of the SMTP server. REQUIRED username : Username for authenticating with the specified SMTP server. REQUIRED password : Password for authenticating with the specified SMTP server. REQUIRED from : Email address where emails are sent from. REQUIRED reply_to : Email address to which replies on the emails should be sent. Can also be a non reply address, or the same as the from address.","title":"Mail"},{"location":"torrust-index/config/#auth","text":"REQUIRED min_password_length : Minimum length of a password when registering a new user. REQUIRED max_password_length : Maximum length of a password when registering a new user. REQUIRED secret_key : Signing key of the JWT authentication tokens. Keeping these default will severely impact the security of your instance, and allows attackers to login as any user.","title":"Auth"},{"location":"torrust-index/config/#storage","text":"REQUIRED upload_path : Path where uploads should be stored. Directories will be automatically created on startup if they don't exist.","title":"Storage"},{"location":"torrust-index/config/#default","text":"[website] name = \"Torrust\" [tracker] url = \"udp://torrust.com:6969/announce\" api_url = \"http://localhost:1212\" token = \"MyAccessToken\" token_valid_seconds = 7257600 [net] port = 3000 [auth] min_password_length = 6 max_password_length = 64 secret_key = \"MaxVerstappenWC2021\" [database] connect_url = \"sqlite://data.db?mode=rwc\" torrent_info_update_interval = 3600 [storage] upload_path = \"./uploads\" [mail] email_verification_enabled = false from = \"example@email.com\" reply_to = \"noreply@email.com\" username = \"\" password = \"\" server = \"\" port = 25","title":"Default"},{"location":"torrust-index/install/","text":"Installing the Index The torrust-index requires a running torrust-tracker . Global Prerequisites Git - Version Control. cURL - Command line tool and library for transferring data with URLs. Rust/Cargo - Compiler toolchain & Package Manager (cargo). Install Prerequisites The frontend can't run on its own and needs and external web server like Apache or NGINX. In this guide we will be using Nginx. Node (version >= 12.0.0) NPM Nginx Installation for Debian/Ubuntu Node: curl -fsSL https://deb.nodesource.com/setup_12.x | bash - apt-get install -y nodejs NPM: sudo apt-get install npm Nginx: sudo apt install nginx For other distros: see Nginx installation tutorial . Installing the backend 1. Create the torrust install directory (if you haven't already) and clone the repo: mkdir /opt/torrust cd /opt/torrust git clone --recurse-submodules https://github.com/torrust/torrust-index.git 2. Go into the newly cloned folder: cd torrust-index 3. Change to the backend directory and create a file called: .env : cd backend echo \"DATABASE_URL=sqlite://data.db?mode=rwc\" > .env 4. Then we have to create the SQLite database and run the migrations. Install the sqlx-cli and create the database: cargo install sqlx-cli sqlx db setup 5. Now build the backend: cargo build --release 6. Run the backend once to generate the config.toml file: ./target/release/torrust-index-backend 7. Then edit the config.toml and change at least the following keys: nano config.toml [tracker] url : Set to a connection string for the tracker. Eg: udp://TRACKER_IP:6969 . api_url : Set to tracker api URL. Default: http://localhost:1212 . token : Set this to an access token from the torrust-tracker config.toml. [net] port : Set to 3000 for this guide. If you choose another port make sure to change the Nginx config as well. [auth] secret_key : Set to a SECURE randomly generated string. Running the backend 1. Run the backend using: cd /opt/torrust/torrust-index/backend ./target/release/torrust-index-backend Running the backend using Tmux 1. Run the backend using Tmux: tmux new -s torrust-index cd /opt/torrust/torrust-index/backend ./target/release/torrust-index-backend Press CTRL+B D to exit the tmux session without killing it. Installing the frontend 1. Start with creating a file called '.env': Make sure to change YOUR_DOMAIN. cd /opt/torrust/torrust-index/frontend echo \"VITE_API_BASE_URL=https://YOUR_DOMAIN/api\" > .env 2. Build the frontend: npm i npm run build After this command successfully completed, a built version of the frontend is in the dist folder. These files will be served by Nginx in the next steps. NGINX Configuration 1. Create a file in /etc/nginx/sites-available/ called torrust.conf with the following contents: Make sure to change YOUR_DOMAIN x2, CERT_PATH and CERT_KEY_PATH. server { listen 80; server_name YOUR_DOMAIN; return 301 https://$host$request_uri; } server { listen 443 ssl; server_name YOUR_DOMAIN; ssl_certificate CERT_PATH; ssl_certificate_key CERT_KEY_PATH; root /opt/torrust/torrust-index/frontend/dist/; location / { try_files $uri $uri/ /index.html; } location /api/ { proxy_pass http://127.0.0.1:3000/; } } 2. Enable the configuration by making a symlink to the config in the sites-enabled directory: ln -s /etc/nginx/sites-available/torrust.conf /etc/nginx/sites-enabled/ 3. After this you can test the validity of the config by executing nginx -t , if the config is valid you can safely reload Nginx to make the new configuration active: sudo systemctl reload nginx","title":"Installation"},{"location":"torrust-index/install/#installing-the-index","text":"The torrust-index requires a running torrust-tracker .","title":"Installing the Index"},{"location":"torrust-index/install/#global-prerequisites","text":"Git - Version Control. cURL - Command line tool and library for transferring data with URLs. Rust/Cargo - Compiler toolchain & Package Manager (cargo).","title":"Global Prerequisites"},{"location":"torrust-index/install/#install-prerequisites","text":"The frontend can't run on its own and needs and external web server like Apache or NGINX. In this guide we will be using Nginx. Node (version >= 12.0.0) NPM Nginx Installation for Debian/Ubuntu Node: curl -fsSL https://deb.nodesource.com/setup_12.x | bash - apt-get install -y nodejs NPM: sudo apt-get install npm Nginx: sudo apt install nginx For other distros: see Nginx installation tutorial .","title":"Install Prerequisites"},{"location":"torrust-index/install/#installing-the-backend","text":"1. Create the torrust install directory (if you haven't already) and clone the repo: mkdir /opt/torrust cd /opt/torrust git clone --recurse-submodules https://github.com/torrust/torrust-index.git 2. Go into the newly cloned folder: cd torrust-index 3. Change to the backend directory and create a file called: .env : cd backend echo \"DATABASE_URL=sqlite://data.db?mode=rwc\" > .env 4. Then we have to create the SQLite database and run the migrations. Install the sqlx-cli and create the database: cargo install sqlx-cli sqlx db setup 5. Now build the backend: cargo build --release 6. Run the backend once to generate the config.toml file: ./target/release/torrust-index-backend 7. Then edit the config.toml and change at least the following keys: nano config.toml [tracker] url : Set to a connection string for the tracker. Eg: udp://TRACKER_IP:6969 . api_url : Set to tracker api URL. Default: http://localhost:1212 . token : Set this to an access token from the torrust-tracker config.toml. [net] port : Set to 3000 for this guide. If you choose another port make sure to change the Nginx config as well. [auth] secret_key : Set to a SECURE randomly generated string.","title":"Installing the backend"},{"location":"torrust-index/install/#running-the-backend","text":"1. Run the backend using: cd /opt/torrust/torrust-index/backend ./target/release/torrust-index-backend","title":"Running the backend"},{"location":"torrust-index/install/#running-the-backend-using-tmux","text":"1. Run the backend using Tmux: tmux new -s torrust-index cd /opt/torrust/torrust-index/backend ./target/release/torrust-index-backend Press CTRL+B D to exit the tmux session without killing it.","title":"Running the backend using Tmux"},{"location":"torrust-index/install/#installing-the-frontend","text":"1. Start with creating a file called '.env': Make sure to change YOUR_DOMAIN. cd /opt/torrust/torrust-index/frontend echo \"VITE_API_BASE_URL=https://YOUR_DOMAIN/api\" > .env 2. Build the frontend: npm i npm run build After this command successfully completed, a built version of the frontend is in the dist folder. These files will be served by Nginx in the next steps.","title":"Installing the frontend"},{"location":"torrust-index/install/#nginx-configuration","text":"1. Create a file in /etc/nginx/sites-available/ called torrust.conf with the following contents: Make sure to change YOUR_DOMAIN x2, CERT_PATH and CERT_KEY_PATH. server { listen 80; server_name YOUR_DOMAIN; return 301 https://$host$request_uri; } server { listen 443 ssl; server_name YOUR_DOMAIN; ssl_certificate CERT_PATH; ssl_certificate_key CERT_KEY_PATH; root /opt/torrust/torrust-index/frontend/dist/; location / { try_files $uri $uri/ /index.html; } location /api/ { proxy_pass http://127.0.0.1:3000/; } } 2. Enable the configuration by making a symlink to the config in the sites-enabled directory: ln -s /etc/nginx/sites-available/torrust.conf /etc/nginx/sites-enabled/ 3. After this you can test the validity of the config by executing nginx -t , if the config is valid you can safely reload Nginx to make the new configuration active: sudo systemctl reload nginx","title":"NGINX Configuration"},{"location":"torrust-tracker/api/","text":"Tracker REST API Notice: This API should not be exposed directly to the internet, it is intended for internal use only. All endpoints require an authorization token which must be set in the configuration before running the tracker. The default configuration uses ?token=MyAccessToken . Statistics GET /api/stats Get the current tracker statistics. Example: GET /api/stats?token=MyAccessToken { \"torrents\": 0, \"seeders\": 0, \"completed\": 0, \"leechers\": 0, \"tcp4_connections_handled\": 1, \"tcp4_announces_handled\": 0, \"tcp4_scrapes_handled\": 1, \"tcp6_connections_handled\": 0, \"tcp6_announces_handled\": 0, \"tcp6_scrapes_handled\": 0, \"udp4_connections_handled\": 0, \"udp4_announces_handled\": 0, \"udp4_scrapes_handled\": 0, \"udp6_connections_handled\": 0, \"udp6_announces_handled\": 0, \"udp6_scrapes_handled\": 0 } Torrents GET /api/torrents Get a list of all currently tracked torrents. Example: GET /api/torrents?token=MyAccessToken [ { \"info_hash\": \"67000d5d41a7da853b78621dc8316e3e0e89ab3c\", \"completed\": 0, \"seeders\": 1, \"leechers\": 0 }, { \"info_hash\": \"e940a7a57294e4c98f62514b32611e38181b6cae\", \"completed\": 1, \"seeders\": 2, \"leechers\": 6 } ] GET /api/torrent/:info_hash Get the detailed info of a torrent hash. Example: GET /api/torrent/67000d5d41a7da853b78621dc8316e3e0e89ab3c?token=MyAccessToken \"updated\" = epoch is seconds. { \"info_hash\": \"67000d5d41a7da853b78621dc8316e3e0e89ab3c\", \"completed\": 0, \"seeders\": 2, \"leechers\": 0, \"peers\": [ [ { \"id\": \"2d7142343338302d616e33476269721111111111\", \"client\": \"qBittorrent\" }, { \"ip\": \"80.80.100.20:1122\", \"updated\": 1630621883, \"uploaded\": 0, \"downloaded\": 0, \"left\": 0, \"event\": \"Started\" } ] ] } Whitelist POST /api/whitelist/:info_hash _Notice: _ whitelist is only used in Listed or PrivateListed mode. Add a torrent hash to the whitelist. Example: POST /api/whitelist/67000d5d41a7da853b78621dc8316e3e0e89ab3c?token=MyAccessToken { \"status\": \"ok\" } DELETE /api/whitelist/:info_hash _Notice: _ whitelist is only used in Listed or PrivateListed mode. Remove a torrent hash from the whitelist. Example: DELETE /api/whitelist/67000d5d41a7da853b78621dc8316e3e0e89ab3c?token=MyAccessToken { \"status\": \"ok\" } Tracker Keys POST /api/key/:seconds_valid Generate a new temporary key which can be used like: udp://torrust-tracker.com/:key Example: POST /api/key/3600?token=MyAccessToken { \"key\": \"2cjvmxYTzG1ESiJBSAn5dxNornXB5CeD\", \"valid_until\": 1630627378 // epoch in seconds } DELETE /api/key/:key Delete a key and immediately revoke its use. Example: DELETE /api/key/2cjvmxYTzG1ESiJBSAn5dxNornXB5CeD?token=MyAccessToken { \"status\": \"ok\" }","title":"API"},{"location":"torrust-tracker/api/#tracker-rest-api","text":"Notice: This API should not be exposed directly to the internet, it is intended for internal use only. All endpoints require an authorization token which must be set in the configuration before running the tracker. The default configuration uses ?token=MyAccessToken .","title":"Tracker REST API"},{"location":"torrust-tracker/api/#statistics","text":"","title":"Statistics"},{"location":"torrust-tracker/api/#get-apistats","text":"Get the current tracker statistics. Example: GET /api/stats?token=MyAccessToken { \"torrents\": 0, \"seeders\": 0, \"completed\": 0, \"leechers\": 0, \"tcp4_connections_handled\": 1, \"tcp4_announces_handled\": 0, \"tcp4_scrapes_handled\": 1, \"tcp6_connections_handled\": 0, \"tcp6_announces_handled\": 0, \"tcp6_scrapes_handled\": 0, \"udp4_connections_handled\": 0, \"udp4_announces_handled\": 0, \"udp4_scrapes_handled\": 0, \"udp6_connections_handled\": 0, \"udp6_announces_handled\": 0, \"udp6_scrapes_handled\": 0 }","title":"GET /api/stats"},{"location":"torrust-tracker/api/#torrents","text":"","title":"Torrents"},{"location":"torrust-tracker/api/#get-apitorrents","text":"Get a list of all currently tracked torrents. Example: GET /api/torrents?token=MyAccessToken [ { \"info_hash\": \"67000d5d41a7da853b78621dc8316e3e0e89ab3c\", \"completed\": 0, \"seeders\": 1, \"leechers\": 0 }, { \"info_hash\": \"e940a7a57294e4c98f62514b32611e38181b6cae\", \"completed\": 1, \"seeders\": 2, \"leechers\": 6 } ]","title":"GET /api/torrents"},{"location":"torrust-tracker/api/#get-apitorrentinfo_hash","text":"Get the detailed info of a torrent hash. Example: GET /api/torrent/67000d5d41a7da853b78621dc8316e3e0e89ab3c?token=MyAccessToken \"updated\" = epoch is seconds. { \"info_hash\": \"67000d5d41a7da853b78621dc8316e3e0e89ab3c\", \"completed\": 0, \"seeders\": 2, \"leechers\": 0, \"peers\": [ [ { \"id\": \"2d7142343338302d616e33476269721111111111\", \"client\": \"qBittorrent\" }, { \"ip\": \"80.80.100.20:1122\", \"updated\": 1630621883, \"uploaded\": 0, \"downloaded\": 0, \"left\": 0, \"event\": \"Started\" } ] ] }","title":"GET /api/torrent/:info_hash"},{"location":"torrust-tracker/api/#whitelist","text":"","title":"Whitelist"},{"location":"torrust-tracker/api/#post-apiwhitelistinfo_hash","text":"_Notice: _ whitelist is only used in Listed or PrivateListed mode. Add a torrent hash to the whitelist. Example: POST /api/whitelist/67000d5d41a7da853b78621dc8316e3e0e89ab3c?token=MyAccessToken { \"status\": \"ok\" }","title":"POST /api/whitelist/:info_hash"},{"location":"torrust-tracker/api/#delete-apiwhitelistinfo_hash","text":"_Notice: _ whitelist is only used in Listed or PrivateListed mode. Remove a torrent hash from the whitelist. Example: DELETE /api/whitelist/67000d5d41a7da853b78621dc8316e3e0e89ab3c?token=MyAccessToken { \"status\": \"ok\" }","title":"DELETE /api/whitelist/:info_hash"},{"location":"torrust-tracker/api/#tracker-keys","text":"","title":"Tracker Keys"},{"location":"torrust-tracker/api/#post-apikeyseconds_valid","text":"Generate a new temporary key which can be used like: udp://torrust-tracker.com/:key Example: POST /api/key/3600?token=MyAccessToken { \"key\": \"2cjvmxYTzG1ESiJBSAn5dxNornXB5CeD\", \"valid_until\": 1630627378 // epoch in seconds }","title":"POST /api/key/:seconds_valid"},{"location":"torrust-tracker/api/#delete-apikeykey","text":"Delete a key and immediately revoke its use. Example: DELETE /api/key/2cjvmxYTzG1ESiJBSAn5dxNornXB5CeD?token=MyAccessToken { \"status\": \"ok\" }","title":"DELETE /api/key/:key"},{"location":"torrust-tracker/config/","text":"Configuring the Tracker torrust-tracker's configuration is stored in a TOML file called: config.toml . The config file can be generated by running the torrust-tracker for the first time. Tracker Modes torrust-tracker currently supports 4 different tracking modes. Public mode: public In this mode the tracker allows any torrent, even if unknown to be tracked. Whitelisted mode: listed In listed mode, anyone can use the tracker like in public mode. Except that torrents must be whitelisted ahead of being announced. Torrents can be added to a whitelist using the REST API. Private mode: private Private tracking requires all peers to be authenticated. Peers can authenticate themselves using a key: https://torrust-tracker.com/announce/<key> . Keys can be created using the REST API. Private-Whitelisted mode: private_listed This mode is a combination of listen and private mode. All peers must authenticate themselves, AND the tracker will only track whitelisted torrents. Configuration Root Level Root Requirement Values Default log_level OPTIONAL Log level. off , info or trace info mode REQUIRED Tracker Mode (See above). public , listed , private or private_listed public db_driver REQUIRED Database Driver. MySQL or Sqlite3 Sqlite3 db_path REQUIRED Database Path. MySQL CONNECTION URL (mysql://USERNAME:PASSWORD@HOST:3306/DATABASE) or Sqlite3 DATABASE PATH data.db announce_interval REQUIRED Interval that peers will announce in. Interval in seconds. 120 min_announce_interval REQUIRED Minimal interval that peers will announce in. Interval in seconds. 120 max_peer_timeout REQUIRED Maximum seconds peers can be inactive before being removed. Seconds. 900 on_reverse_proxy REQUIRED If true, tracker will use X-Forwarded-For header as peer IP. true or false false external_ip OPTIONAL Needs to be set if announcing to this tracker from local network. IP like: 100.69.420.117 EMPTY tracker_usage_statistics REQUIRED Keep track of tracker usage statistics. true or false true persistent_torrent_completed_stat REQUIRED Keep track of the completed stat in torrents, even after reboot. true or false false inactive_peer_cleanup_interval REQUIRED Inactive peers get removed from each torrent every interval. Interval in seconds or 0 to disable. 600 remove_peerless_torrents REQUIRED Remove torrents without peers during the inactive_peer_cleanup_interval. true or false true UDP Tracker [[udp_trackers]] (can add multiple) OPTIONAL Values Default enabled REQUIRED Whether this bind is enabled. true or false false bind_address REQUIRED Bind address + port. Example: 0.0.0.0:6969 0.0.0.0:6969 HTTP Tracker [[http_trackers]] (can add multiple) OPTIONAL Values Default enabled REQUIRED Whether this bind is enabled. true or false false bind_address REQUIRED Bind address + port. Example: 0.0.0.0:6969 0.0.0.0:6969 ssl_enabled REQUIRED Enable SSL or not. HIGHLY RECOMMENDED for private trackers. true or false false ssl_cert_path OPTIONAL Path to SSL cert. Any path. EMPTY ssl_key_path OPTIONAL Path to SSL cert key. Any path. EMPTY HTTP API [http_api] REQUIRED Values Default enabled REQUIRED Enables built-in API. true or false true bind_address REQUIRED Bind address + port. Example: 127.0.0.1:1212 127.0.0.1:1212 [http_api.access_tokens] REQUIRED IF HTTP API ENABLED Values Default {user} OPTIONAL Token for built-in API. {key} admin = \"MyAccessToken\" Sample Configuration log_level = \"info\" mode = \"public\" db_driver = \"Sqlite3\" db_path = \"data.db\" announce_interval = 120 min_announce_interval = 120 max_peer_timeout = 900 on_reverse_proxy = false external_ip = \"0.0.0.0\" tracker_usage_statistics = true persistent_torrent_completed_stat = false inactive_peer_cleanup_interval = 600 remove_peerless_torrents = true [[udp_trackers]] enabled = true bind_address = \"0.0.0.0:6969\" [[udp_trackers]] enabled = true bind_address = \":::6969\" [[http_trackers]] enabled = true bind_address = \"0.0.0.0:6969\" ssl_enabled = false ssl_cert_path = \"\" ssl_key_path = \"\" [[http_trackers]] enabled = true bind_address = \":::6969\" ssl_enabled = false ssl_cert_path = \"\" ssl_key_path = \"\" [http_api] enabled = true bind_address = \"127.0.0.1:1212\" [http_api.access_tokens] admin = \"MyAccessToken\"","title":"Configuration"},{"location":"torrust-tracker/config/#configuring-the-tracker","text":"torrust-tracker's configuration is stored in a TOML file called: config.toml . The config file can be generated by running the torrust-tracker for the first time.","title":"Configuring the Tracker"},{"location":"torrust-tracker/config/#tracker-modes","text":"torrust-tracker currently supports 4 different tracking modes.","title":"Tracker Modes"},{"location":"torrust-tracker/config/#public","text":"mode: public In this mode the tracker allows any torrent, even if unknown to be tracked.","title":"Public"},{"location":"torrust-tracker/config/#whitelisted","text":"mode: listed In listed mode, anyone can use the tracker like in public mode. Except that torrents must be whitelisted ahead of being announced. Torrents can be added to a whitelist using the REST API.","title":"Whitelisted"},{"location":"torrust-tracker/config/#private","text":"mode: private Private tracking requires all peers to be authenticated. Peers can authenticate themselves using a key: https://torrust-tracker.com/announce/<key> . Keys can be created using the REST API.","title":"Private"},{"location":"torrust-tracker/config/#private-whitelisted","text":"mode: private_listed This mode is a combination of listen and private mode. All peers must authenticate themselves, AND the tracker will only track whitelisted torrents.","title":"Private-Whitelisted"},{"location":"torrust-tracker/config/#configuration","text":"","title":"Configuration"},{"location":"torrust-tracker/config/#root-level","text":"Root Requirement Values Default log_level OPTIONAL Log level. off , info or trace info mode REQUIRED Tracker Mode (See above). public , listed , private or private_listed public db_driver REQUIRED Database Driver. MySQL or Sqlite3 Sqlite3 db_path REQUIRED Database Path. MySQL CONNECTION URL (mysql://USERNAME:PASSWORD@HOST:3306/DATABASE) or Sqlite3 DATABASE PATH data.db announce_interval REQUIRED Interval that peers will announce in. Interval in seconds. 120 min_announce_interval REQUIRED Minimal interval that peers will announce in. Interval in seconds. 120 max_peer_timeout REQUIRED Maximum seconds peers can be inactive before being removed. Seconds. 900 on_reverse_proxy REQUIRED If true, tracker will use X-Forwarded-For header as peer IP. true or false false external_ip OPTIONAL Needs to be set if announcing to this tracker from local network. IP like: 100.69.420.117 EMPTY tracker_usage_statistics REQUIRED Keep track of tracker usage statistics. true or false true persistent_torrent_completed_stat REQUIRED Keep track of the completed stat in torrents, even after reboot. true or false false inactive_peer_cleanup_interval REQUIRED Inactive peers get removed from each torrent every interval. Interval in seconds or 0 to disable. 600 remove_peerless_torrents REQUIRED Remove torrents without peers during the inactive_peer_cleanup_interval. true or false true","title":"Root Level"},{"location":"torrust-tracker/config/#udp-tracker","text":"[[udp_trackers]] (can add multiple) OPTIONAL Values Default enabled REQUIRED Whether this bind is enabled. true or false false bind_address REQUIRED Bind address + port. Example: 0.0.0.0:6969 0.0.0.0:6969","title":"UDP Tracker"},{"location":"torrust-tracker/config/#http-tracker","text":"[[http_trackers]] (can add multiple) OPTIONAL Values Default enabled REQUIRED Whether this bind is enabled. true or false false bind_address REQUIRED Bind address + port. Example: 0.0.0.0:6969 0.0.0.0:6969 ssl_enabled REQUIRED Enable SSL or not. HIGHLY RECOMMENDED for private trackers. true or false false ssl_cert_path OPTIONAL Path to SSL cert. Any path. EMPTY ssl_key_path OPTIONAL Path to SSL cert key. Any path. EMPTY","title":"HTTP Tracker"},{"location":"torrust-tracker/config/#http-api","text":"[http_api] REQUIRED Values Default enabled REQUIRED Enables built-in API. true or false true bind_address REQUIRED Bind address + port. Example: 127.0.0.1:1212 127.0.0.1:1212 [http_api.access_tokens] REQUIRED IF HTTP API ENABLED Values Default {user} OPTIONAL Token for built-in API. {key} admin = \"MyAccessToken\"","title":"HTTP API"},{"location":"torrust-tracker/config/#sample-configuration","text":"log_level = \"info\" mode = \"public\" db_driver = \"Sqlite3\" db_path = \"data.db\" announce_interval = 120 min_announce_interval = 120 max_peer_timeout = 900 on_reverse_proxy = false external_ip = \"0.0.0.0\" tracker_usage_statistics = true persistent_torrent_completed_stat = false inactive_peer_cleanup_interval = 600 remove_peerless_torrents = true [[udp_trackers]] enabled = true bind_address = \"0.0.0.0:6969\" [[udp_trackers]] enabled = true bind_address = \":::6969\" [[http_trackers]] enabled = true bind_address = \"0.0.0.0:6969\" ssl_enabled = false ssl_cert_path = \"\" ssl_key_path = \"\" [[http_trackers]] enabled = true bind_address = \":::6969\" ssl_enabled = false ssl_cert_path = \"\" ssl_key_path = \"\" [http_api] enabled = true bind_address = \"127.0.0.1:1212\" [http_api.access_tokens] admin = \"MyAccessToken\"","title":"Sample Configuration"},{"location":"torrust-tracker/install/","text":"Installing the Tracker Global Prerequisites Git - Version Control. cURL - Command line tool and library for transferring data with URLs. Rust/Cargo version => v1.60.0 - Compiler toolchain & Package Manager (cargo). (Optional) Tmux - Run processes in the background. Install Prerequisites OpenSSL: for Arch Linux: sudo pacman -S pkg-config openssl for Debian/Ubuntu: sudo apt-get install pkg-config libssl-dev SQLite3: for Debian/Ubuntu: sudo apt-get install libsqlite3-dev Installation 1. Create the torrust install directory (if you haven't already) and clone the repo: mkdir /opt/torrust cd /opt/torrust git clone https://github.com/torrust/torrust-tracker.git 2. Build the source code: cd torrust-tracker cargo build --release If you run into errors here, try running : rustup update stable before building. 3. Run the torrust-tracker once to create the config.toml file: ./target/release/torrust-tracker 4. Edit the newly created config.toml file (See: Configuration ): nano config.toml Example config.toml : log_level = \"info\" mode = \"private\" db_driver = \"Sqlite3\" db_path = \"data.db\" announce_interval = 120 min_announce_interval = 120 max_peer_timeout = 900 on_reverse_proxy = false external_ip = \"0.0.0.0\" tracker_usage_statistics = true persistent_torrent_completed_stat = false inactive_peer_cleanup_interval = 600 remove_peerless_torrents = true [[udp_trackers]] enabled = false bind_address = \"0.0.0.0:6969\" [[http_trackers]] enabled = true bind_address = \"0.0.0.0:6969\" ssl_enabled = false ssl_cert_path = \"\" ssl_key_path = \"\" [http_api] enabled = true bind_address = \"127.0.0.1:1212\" [http_api.access_tokens] admin = \"MyAccessToken\" 5. Allow the port from bind_address (default: 6969): If you are using a reverse proxy like NGINX, you can skip this step. sudo ufw allow 6969 Setup SSL (optional) If you are using a reverse proxy like NGINX, you can skip this step and use NGINX for the SSL instead. 1. Edit your nano.config file and change the following settings: ... [[http_trackers]] ... ssl_enabled = true ssl_cert_path = \"YOUR_CERT_PATH\" ssl_key_path = \"YOUR_CERT_KEY_PATH\" ... Installation behind NGINX or Apache reverse proxy Follow steps 1-4 from install above. 5. Change the following settings in config.toml : ... on_reverse_proxy = true ... [[http_trackers]] bind_address = \"127.0.0.1:6969\" ssl_enabled = false ... NGINX 6. Create an NGINX config for the tracker (example: tracker.torrust.com): Make sure to use your own domain name instead. sudo nano /etc/nginx/sites-available/tracker.torrust.com 6.1. Insert the example configuration: Don't copy the SSL comment and make sure to change the domain name to yours. # without SSL server { listen 80; server_name tracker.torrust.com; location / { proxy_set_header X-Forwarded-For $remote_addr; proxy_pass http://127.0.0.1:6969; } } Make sure to change the ssl_certificate paths. # with SSL server { listen 80; server_name tracker.torrust.com; return 301 https://$host$request_uri; } server { listen 443; server_name tracker.torrust.com; ssl_certificate CERT_PATH ssl_certificate_key CERT_KEY_PATH; location / { proxy_set_header X-Forwarded-For $remote_addr; proxy_pass http://127.0.0.1:6969; } } 7. Enable the configuration by making a symlink to the config in the sites-enabled directory. Replace tracker.torrust.com with your domain/NGINX config. ln -s /etc/nginx/sites-available/tracker.torrust.com /etc/nginx/sites-enabled/ 8. After this you can test the validity of the config by executing nginx -t , if the config is valid you can safely reload Nginx to make the new configuration active: sudo systemctl reload nginx Apache 6. Create an Apache config for the tracker (example: tracker.torrust.com): Make sure to use your own domain name instead. sudo nano /etc/apache2/sites-available/tracker.torrust.com.conf 6.1. Insert the example configuration: Don't copy the SSL comment and make sure to change the domain name to yours. # HTTP only (without SSL) <VirtualHost *:80> ServerAdmin webmaster@tracker.torrust.com ServerName tracker.torrust.com <Proxy *> Order allow,deny Allow from all </Proxy> ProxyPreserveHost On ProxyRequests Off AllowEncodedSlashes NoDecode ProxyPass / http://localhost:6969/ ProxyPassReverse / http://localhost:6969/ ProxyPassReverse / http://tracker.torrust.com/ RequestHeader set X-Forwarded-Proto \"http\" RequestHeader set X-Forwarded-Port \"80\" ErrorLog ${APACHE_LOG_DIR}/tracker.torrust.com-error.log CustomLog ${APACHE_LOG_DIR}/tracker.torrust.com-access.log combined </VirtualHost> Make sure to change the SSLCertificateFile and SSLCertificateKeyFile paths. # HTTPS only (with SSL - force redirect to HTTPS) <VirtualHost *:80> ServerAdmin webmaster@tracker.torrust.com ServerName tracker.torrust.com <IfModule mod_rewrite.c> RewriteEngine on RewriteCond %{HTTPS} off RewriteRule ^ https://%{SERVER_NAME}%{REQUEST_URI} [END,NE,R=permanent] </IfModule> </VirtualHost> <IfModule mod_ssl.c> <VirtualHost *:443> ServerAdmin webmaster@tracker.torrust.com ServerName tracker.torrust.com <Proxy *> Order allow,deny Allow from all </Proxy> ProxyPreserveHost On ProxyRequests Off AllowEncodedSlashes NoDecode ProxyPass / http://localhost:3000/ ProxyPassReverse / http://localhost:3000/ ProxyPassReverse / http://tracker.torrust.com/ RequestHeader set X-Forwarded-Proto \"https\" RequestHeader set X-Forwarded-Port \"443\" ErrorLog ${APACHE_LOG_DIR}/tracker.torrust.com-error.log CustomLog ${APACHE_LOG_DIR}/tracker.torrust.com-access.log combined SSLCertificateFile CERT_PATH SSLCertificateKeyFile CERT_KEY_PATH </VirtualHost> </IfModule> 7. Enable the configuration by making a symlink to the config in the sites-enabled directory. Replace tracker.torrust.com with your domain/Apache config. sudo ln -s /etc/apache2/sites-available/tracker.torrust.com.conf /etc/apache2/sites-enabled/ # or sudo a2enssite tracker.torrust.com 8. After this you can test the validity of the config by executing sudo apache2ctl -t , if the config is valid you can safely reload Apache to make the new configuration active: sudo systemctl reload apache2 How to run torrust-tracker","title":"Installation"},{"location":"torrust-tracker/install/#installing-the-tracker","text":"","title":"Installing the Tracker"},{"location":"torrust-tracker/install/#global-prerequisites","text":"Git - Version Control. cURL - Command line tool and library for transferring data with URLs. Rust/Cargo version => v1.60.0 - Compiler toolchain & Package Manager (cargo). (Optional) Tmux - Run processes in the background.","title":"Global Prerequisites"},{"location":"torrust-tracker/install/#install-prerequisites","text":"OpenSSL: for Arch Linux: sudo pacman -S pkg-config openssl for Debian/Ubuntu: sudo apt-get install pkg-config libssl-dev SQLite3: for Debian/Ubuntu: sudo apt-get install libsqlite3-dev","title":"Install Prerequisites"},{"location":"torrust-tracker/install/#installation","text":"1. Create the torrust install directory (if you haven't already) and clone the repo: mkdir /opt/torrust cd /opt/torrust git clone https://github.com/torrust/torrust-tracker.git 2. Build the source code: cd torrust-tracker cargo build --release If you run into errors here, try running : rustup update stable before building. 3. Run the torrust-tracker once to create the config.toml file: ./target/release/torrust-tracker 4. Edit the newly created config.toml file (See: Configuration ): nano config.toml Example config.toml : log_level = \"info\" mode = \"private\" db_driver = \"Sqlite3\" db_path = \"data.db\" announce_interval = 120 min_announce_interval = 120 max_peer_timeout = 900 on_reverse_proxy = false external_ip = \"0.0.0.0\" tracker_usage_statistics = true persistent_torrent_completed_stat = false inactive_peer_cleanup_interval = 600 remove_peerless_torrents = true [[udp_trackers]] enabled = false bind_address = \"0.0.0.0:6969\" [[http_trackers]] enabled = true bind_address = \"0.0.0.0:6969\" ssl_enabled = false ssl_cert_path = \"\" ssl_key_path = \"\" [http_api] enabled = true bind_address = \"127.0.0.1:1212\" [http_api.access_tokens] admin = \"MyAccessToken\" 5. Allow the port from bind_address (default: 6969): If you are using a reverse proxy like NGINX, you can skip this step. sudo ufw allow 6969","title":"Installation"},{"location":"torrust-tracker/install/#setup-ssl-optional","text":"If you are using a reverse proxy like NGINX, you can skip this step and use NGINX for the SSL instead. 1. Edit your nano.config file and change the following settings: ... [[http_trackers]] ... ssl_enabled = true ssl_cert_path = \"YOUR_CERT_PATH\" ssl_key_path = \"YOUR_CERT_KEY_PATH\" ...","title":"Setup SSL (optional)"},{"location":"torrust-tracker/install/#installation-behind-nginx-or-apache-reverse-proxy","text":"Follow steps 1-4 from install above. 5. Change the following settings in config.toml : ... on_reverse_proxy = true ... [[http_trackers]] bind_address = \"127.0.0.1:6969\" ssl_enabled = false ...","title":"Installation behind NGINX or Apache reverse proxy"},{"location":"torrust-tracker/install/#nginx","text":"6. Create an NGINX config for the tracker (example: tracker.torrust.com): Make sure to use your own domain name instead. sudo nano /etc/nginx/sites-available/tracker.torrust.com 6.1. Insert the example configuration: Don't copy the SSL comment and make sure to change the domain name to yours. # without SSL server { listen 80; server_name tracker.torrust.com; location / { proxy_set_header X-Forwarded-For $remote_addr; proxy_pass http://127.0.0.1:6969; } } Make sure to change the ssl_certificate paths. # with SSL server { listen 80; server_name tracker.torrust.com; return 301 https://$host$request_uri; } server { listen 443; server_name tracker.torrust.com; ssl_certificate CERT_PATH ssl_certificate_key CERT_KEY_PATH; location / { proxy_set_header X-Forwarded-For $remote_addr; proxy_pass http://127.0.0.1:6969; } } 7. Enable the configuration by making a symlink to the config in the sites-enabled directory. Replace tracker.torrust.com with your domain/NGINX config. ln -s /etc/nginx/sites-available/tracker.torrust.com /etc/nginx/sites-enabled/ 8. After this you can test the validity of the config by executing nginx -t , if the config is valid you can safely reload Nginx to make the new configuration active: sudo systemctl reload nginx","title":"NGINX"},{"location":"torrust-tracker/install/#apache","text":"6. Create an Apache config for the tracker (example: tracker.torrust.com): Make sure to use your own domain name instead. sudo nano /etc/apache2/sites-available/tracker.torrust.com.conf 6.1. Insert the example configuration: Don't copy the SSL comment and make sure to change the domain name to yours. # HTTP only (without SSL) <VirtualHost *:80> ServerAdmin webmaster@tracker.torrust.com ServerName tracker.torrust.com <Proxy *> Order allow,deny Allow from all </Proxy> ProxyPreserveHost On ProxyRequests Off AllowEncodedSlashes NoDecode ProxyPass / http://localhost:6969/ ProxyPassReverse / http://localhost:6969/ ProxyPassReverse / http://tracker.torrust.com/ RequestHeader set X-Forwarded-Proto \"http\" RequestHeader set X-Forwarded-Port \"80\" ErrorLog ${APACHE_LOG_DIR}/tracker.torrust.com-error.log CustomLog ${APACHE_LOG_DIR}/tracker.torrust.com-access.log combined </VirtualHost> Make sure to change the SSLCertificateFile and SSLCertificateKeyFile paths. # HTTPS only (with SSL - force redirect to HTTPS) <VirtualHost *:80> ServerAdmin webmaster@tracker.torrust.com ServerName tracker.torrust.com <IfModule mod_rewrite.c> RewriteEngine on RewriteCond %{HTTPS} off RewriteRule ^ https://%{SERVER_NAME}%{REQUEST_URI} [END,NE,R=permanent] </IfModule> </VirtualHost> <IfModule mod_ssl.c> <VirtualHost *:443> ServerAdmin webmaster@tracker.torrust.com ServerName tracker.torrust.com <Proxy *> Order allow,deny Allow from all </Proxy> ProxyPreserveHost On ProxyRequests Off AllowEncodedSlashes NoDecode ProxyPass / http://localhost:3000/ ProxyPassReverse / http://localhost:3000/ ProxyPassReverse / http://tracker.torrust.com/ RequestHeader set X-Forwarded-Proto \"https\" RequestHeader set X-Forwarded-Port \"443\" ErrorLog ${APACHE_LOG_DIR}/tracker.torrust.com-error.log CustomLog ${APACHE_LOG_DIR}/tracker.torrust.com-access.log combined SSLCertificateFile CERT_PATH SSLCertificateKeyFile CERT_KEY_PATH </VirtualHost> </IfModule> 7. Enable the configuration by making a symlink to the config in the sites-enabled directory. Replace tracker.torrust.com with your domain/Apache config. sudo ln -s /etc/apache2/sites-available/tracker.torrust.com.conf /etc/apache2/sites-enabled/ # or sudo a2enssite tracker.torrust.com 8. After this you can test the validity of the config by executing sudo apache2ctl -t , if the config is valid you can safely reload Apache to make the new configuration active: sudo systemctl reload apache2 How to run torrust-tracker","title":"Apache"},{"location":"torrust-tracker/usage/","text":"Using the Tracker Usage 1. While in the torrust-tracker folder, you can run the torrust-tracker like this: ./target/release/torrust-tracker Usage with Tmux 1. Open a new Tmux session: tmux new -s torrust-tracker 2. While in Tmux session, run the torrust-tracker: cd /opt/torrust/torrust-tracker ./target/release/torrust-tracker 3. Detach from Tmux session: CTRL+B D Announce URL Default NGINX UDP udp://TRACKER_IP:PORT/announce X HTTP http://TRACKER_IP:PORT/announce http://tracker.YOUR_DOMAIN/announce HTTPS (SSL) https://TRACKER_IP:PORT/announce https://tracker.YOUR_DOMAIN/announce","title":"Usage"},{"location":"torrust-tracker/usage/#using-the-tracker","text":"","title":"Using the Tracker"},{"location":"torrust-tracker/usage/#usage","text":"1. While in the torrust-tracker folder, you can run the torrust-tracker like this: ./target/release/torrust-tracker","title":"Usage"},{"location":"torrust-tracker/usage/#usage-with-tmux","text":"1. Open a new Tmux session: tmux new -s torrust-tracker 2. While in Tmux session, run the torrust-tracker: cd /opt/torrust/torrust-tracker ./target/release/torrust-tracker 3. Detach from Tmux session: CTRL+B D","title":"Usage with Tmux"},{"location":"torrust-tracker/usage/#announce-url","text":"Default NGINX UDP udp://TRACKER_IP:PORT/announce X HTTP http://TRACKER_IP:PORT/announce http://tracker.YOUR_DOMAIN/announce HTTPS (SSL) https://TRACKER_IP:PORT/announce https://tracker.YOUR_DOMAIN/announce","title":"Announce URL"}]}